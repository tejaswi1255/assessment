AWSTemplateFormatVersion: "2010-09-09"
Description: Creates two instances and encrypted s3 bucket

Parameters:
  InstanceType:
    Description: Instance type to launch
    Type: String
    Default: t3.micro
  VPC:
    Type: String 
    Description: VPCID
  SubnetId:
    Type: String
    Description: SubnetId  
  ImageId:
    Description: AMI Id
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /AIS/AMI/AmazonLinux2/Id
  S3Bucket:
    Description: Name of Bucket for objects
    Type: String

Resources:
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile1
      ImageId:
        Ref: ImageId
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: InstanceProfile1
      SecurityGroupIds:
        - Ref: SecurityGroup
      SubnetId:
        Ref: Subnet
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-Instance1"
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            set -eux
            yum install update
            yum groupinstall ‘Development Tools’
            yum install python-devel
            pip install pandas
            pip install numpy
  # Instance 2
  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: InstanceProfile2
      ImageId:
        Ref: ImageId
      InstanceType:
        Ref: InstanceType
      SecurityGroupIds:
        - Ref: SecurityGroup
      SubnetId:
        - Ref: Subnet
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName}-Instance2"
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -eux
            yum install update
            yum groupinstall ‘Development Tools’
            yum install python-devel
            pip install pandas
            pip install numpy

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: "${AWS::StackName} SG"
      VpcId:
        Ref: VPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080

  Subnet:
    Type: AWS::EC2::Subnet
    Properties: 
        AvailabilityZone: String
        CidrBlock: x.x.x.x/24
        MapPublicIpOnLaunch: False
        VpcId:
          Ref: VPC        

  InstanceProfile1:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: InstanceRole1

  InstanceProfile2:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: InstanceRole2      

  InstanceRole1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ArtifactsRetrieval
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: RetrievingArtifacts
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListObjects
                Resource:
                  Fn::Sub: "arn:aws:s3:::${S3Bucket}/*"

  InstanceRole2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Artifacts 
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Retrievingobjects
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListObjects
                Resource:
                  Fn::Sub: "arn:aws:s3:::${S3Bucket}/*"

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref KMSKey
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS Key to Encrypt the S3 Bucket
      EnableKeyRotation: true
      KeyPolicy:
        Id: KeyPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - !If
            - IamRoles
            - Sid: Allow IAM Roles usage of the key
              Effect: Allow
              Principal:
                AWS: !Ref IamRoles
                Service: s3.amazonaws.com
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: "*"
            - !Ref "AWS::NoValue"

Outputs:
    EC2Instance1:
    Description: The Instance 1
    Value: !Ref EC2Instance1
    Export:
      Name: !Sub "${AWS::StackName}-Instance1"
  EC2Instance2:
    Description: The Application Instance ID
    Value: !Ref EC2Instance2
    Export:
      Name: !Sub "${AWS::StackName}-Instance2"
  S3Bucket:
    Description: S3Bucket
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-S3Bucket"